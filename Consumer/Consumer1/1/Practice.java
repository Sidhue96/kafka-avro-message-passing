/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Practice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 58453133900942652L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Practice\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"pid\",\"type\":[\"string\",\"null\"]},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"age\",\"type\":[\"string\",\"null\"]},{\"name\":\"hypertension\",\"type\":[\"string\",\"null\"]},{\"name\":\"heart_disease\",\"type\":[\"string\",\"null\"]},{\"name\":\"ever_married\",\"type\":[\"string\",\"null\"]},{\"name\":\"work_type\",\"type\":[\"string\",\"null\"]},{\"name\":\"residence_type\",\"type\":[\"string\",\"null\"]},{\"name\":\"avg_glucose_level\",\"type\":[\"string\",\"null\"]},{\"name\":\"bmi\",\"type\":[\"string\",\"null\"]},{\"name\":\"stroke\",\"type\":[\"string\",\"null\"]},{\"name\":\"smoking_status\",\"type\":[\"string\",\"null\"]},{\"name\":\"time_stamp\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Practice> ENCODER =
      new BinaryMessageEncoder<Practice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Practice> DECODER =
      new BinaryMessageDecoder<Practice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Practice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Practice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Practice>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Practice to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Practice from a ByteBuffer. */
  public static Practice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence pid;
  @Deprecated public java.lang.CharSequence gender;
  @Deprecated public java.lang.CharSequence age;
  @Deprecated public java.lang.CharSequence hypertension;
  @Deprecated public java.lang.CharSequence heart_disease;
  @Deprecated public java.lang.CharSequence ever_married;
  @Deprecated public java.lang.CharSequence work_type;
  @Deprecated public java.lang.CharSequence residence_type;
  @Deprecated public java.lang.CharSequence avg_glucose_level;
  @Deprecated public java.lang.CharSequence bmi;
  @Deprecated public java.lang.CharSequence stroke;
  @Deprecated public java.lang.CharSequence smoking_status;
  @Deprecated public java.lang.CharSequence time_stamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Practice() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param pid The new value for pid
   * @param gender The new value for gender
   * @param age The new value for age
   * @param hypertension The new value for hypertension
   * @param heart_disease The new value for heart_disease
   * @param ever_married The new value for ever_married
   * @param work_type The new value for work_type
   * @param residence_type The new value for residence_type
   * @param avg_glucose_level The new value for avg_glucose_level
   * @param bmi The new value for bmi
   * @param stroke The new value for stroke
   * @param smoking_status The new value for smoking_status
   * @param time_stamp The new value for time_stamp
   */
  public Practice(java.lang.CharSequence id, java.lang.CharSequence pid, java.lang.CharSequence gender, java.lang.CharSequence age, java.lang.CharSequence hypertension, java.lang.CharSequence heart_disease, java.lang.CharSequence ever_married, java.lang.CharSequence work_type, java.lang.CharSequence residence_type, java.lang.CharSequence avg_glucose_level, java.lang.CharSequence bmi, java.lang.CharSequence stroke, java.lang.CharSequence smoking_status, java.lang.CharSequence time_stamp) {
    this.id = id;
    this.pid = pid;
    this.gender = gender;
    this.age = age;
    this.hypertension = hypertension;
    this.heart_disease = heart_disease;
    this.ever_married = ever_married;
    this.work_type = work_type;
    this.residence_type = residence_type;
    this.avg_glucose_level = avg_glucose_level;
    this.bmi = bmi;
    this.stroke = stroke;
    this.smoking_status = smoking_status;
    this.time_stamp = time_stamp;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return pid;
    case 2: return gender;
    case 3: return age;
    case 4: return hypertension;
    case 5: return heart_disease;
    case 6: return ever_married;
    case 7: return work_type;
    case 8: return residence_type;
    case 9: return avg_glucose_level;
    case 10: return bmi;
    case 11: return stroke;
    case 12: return smoking_status;
    case 13: return time_stamp;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: pid = (java.lang.CharSequence)value$; break;
    case 2: gender = (java.lang.CharSequence)value$; break;
    case 3: age = (java.lang.CharSequence)value$; break;
    case 4: hypertension = (java.lang.CharSequence)value$; break;
    case 5: heart_disease = (java.lang.CharSequence)value$; break;
    case 6: ever_married = (java.lang.CharSequence)value$; break;
    case 7: work_type = (java.lang.CharSequence)value$; break;
    case 8: residence_type = (java.lang.CharSequence)value$; break;
    case 9: avg_glucose_level = (java.lang.CharSequence)value$; break;
    case 10: bmi = (java.lang.CharSequence)value$; break;
    case 11: stroke = (java.lang.CharSequence)value$; break;
    case 12: smoking_status = (java.lang.CharSequence)value$; break;
    case 13: time_stamp = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'pid' field.
   * @return The value of the 'pid' field.
   */
  public java.lang.CharSequence getPid() {
    return pid;
  }

  /**
   * Sets the value of the 'pid' field.
   * @param value the value to set.
   */
  public void setPid(java.lang.CharSequence value) {
    this.pid = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }

  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public java.lang.CharSequence getAge() {
    return age;
  }

  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(java.lang.CharSequence value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'hypertension' field.
   * @return The value of the 'hypertension' field.
   */
  public java.lang.CharSequence getHypertension() {
    return hypertension;
  }

  /**
   * Sets the value of the 'hypertension' field.
   * @param value the value to set.
   */
  public void setHypertension(java.lang.CharSequence value) {
    this.hypertension = value;
  }

  /**
   * Gets the value of the 'heart_disease' field.
   * @return The value of the 'heart_disease' field.
   */
  public java.lang.CharSequence getHeartDisease() {
    return heart_disease;
  }

  /**
   * Sets the value of the 'heart_disease' field.
   * @param value the value to set.
   */
  public void setHeartDisease(java.lang.CharSequence value) {
    this.heart_disease = value;
  }

  /**
   * Gets the value of the 'ever_married' field.
   * @return The value of the 'ever_married' field.
   */
  public java.lang.CharSequence getEverMarried() {
    return ever_married;
  }

  /**
   * Sets the value of the 'ever_married' field.
   * @param value the value to set.
   */
  public void setEverMarried(java.lang.CharSequence value) {
    this.ever_married = value;
  }

  /**
   * Gets the value of the 'work_type' field.
   * @return The value of the 'work_type' field.
   */
  public java.lang.CharSequence getWorkType() {
    return work_type;
  }

  /**
   * Sets the value of the 'work_type' field.
   * @param value the value to set.
   */
  public void setWorkType(java.lang.CharSequence value) {
    this.work_type = value;
  }

  /**
   * Gets the value of the 'residence_type' field.
   * @return The value of the 'residence_type' field.
   */
  public java.lang.CharSequence getResidenceType() {
    return residence_type;
  }

  /**
   * Sets the value of the 'residence_type' field.
   * @param value the value to set.
   */
  public void setResidenceType(java.lang.CharSequence value) {
    this.residence_type = value;
  }

  /**
   * Gets the value of the 'avg_glucose_level' field.
   * @return The value of the 'avg_glucose_level' field.
   */
  public java.lang.CharSequence getAvgGlucoseLevel() {
    return avg_glucose_level;
  }

  /**
   * Sets the value of the 'avg_glucose_level' field.
   * @param value the value to set.
   */
  public void setAvgGlucoseLevel(java.lang.CharSequence value) {
    this.avg_glucose_level = value;
  }

  /**
   * Gets the value of the 'bmi' field.
   * @return The value of the 'bmi' field.
   */
  public java.lang.CharSequence getBmi() {
    return bmi;
  }

  /**
   * Sets the value of the 'bmi' field.
   * @param value the value to set.
   */
  public void setBmi(java.lang.CharSequence value) {
    this.bmi = value;
  }

  /**
   * Gets the value of the 'stroke' field.
   * @return The value of the 'stroke' field.
   */
  public java.lang.CharSequence getStroke() {
    return stroke;
  }

  /**
   * Sets the value of the 'stroke' field.
   * @param value the value to set.
   */
  public void setStroke(java.lang.CharSequence value) {
    this.stroke = value;
  }

  /**
   * Gets the value of the 'smoking_status' field.
   * @return The value of the 'smoking_status' field.
   */
  public java.lang.CharSequence getSmokingStatus() {
    return smoking_status;
  }

  /**
   * Sets the value of the 'smoking_status' field.
   * @param value the value to set.
   */
  public void setSmokingStatus(java.lang.CharSequence value) {
    this.smoking_status = value;
  }

  /**
   * Gets the value of the 'time_stamp' field.
   * @return The value of the 'time_stamp' field.
   */
  public java.lang.CharSequence getTimeStamp() {
    return time_stamp;
  }

  /**
   * Sets the value of the 'time_stamp' field.
   * @param value the value to set.
   */
  public void setTimeStamp(java.lang.CharSequence value) {
    this.time_stamp = value;
  }

  /**
   * Creates a new Practice RecordBuilder.
   * @return A new Practice RecordBuilder
   */
  public static Practice.Builder newBuilder() {
    return new Practice.Builder();
  }

  /**
   * Creates a new Practice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Practice RecordBuilder
   */
  public static Practice.Builder newBuilder(Practice.Builder other) {
    return new Practice.Builder(other);
  }

  /**
   * Creates a new Practice RecordBuilder by copying an existing Practice instance.
   * @param other The existing instance to copy.
   * @return A new Practice RecordBuilder
   */
  public static Practice.Builder newBuilder(Practice other) {
    return new Practice.Builder(other);
  }

  /**
   * RecordBuilder for Practice instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Practice>
    implements org.apache.avro.data.RecordBuilder<Practice> {

    private java.lang.CharSequence id;
    private java.lang.CharSequence pid;
    private java.lang.CharSequence gender;
    private java.lang.CharSequence age;
    private java.lang.CharSequence hypertension;
    private java.lang.CharSequence heart_disease;
    private java.lang.CharSequence ever_married;
    private java.lang.CharSequence work_type;
    private java.lang.CharSequence residence_type;
    private java.lang.CharSequence avg_glucose_level;
    private java.lang.CharSequence bmi;
    private java.lang.CharSequence stroke;
    private java.lang.CharSequence smoking_status;
    private java.lang.CharSequence time_stamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Practice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pid)) {
        this.pid = data().deepCopy(fields()[1].schema(), other.pid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gender)) {
        this.gender = data().deepCopy(fields()[2].schema(), other.gender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hypertension)) {
        this.hypertension = data().deepCopy(fields()[4].schema(), other.hypertension);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.heart_disease)) {
        this.heart_disease = data().deepCopy(fields()[5].schema(), other.heart_disease);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ever_married)) {
        this.ever_married = data().deepCopy(fields()[6].schema(), other.ever_married);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.work_type)) {
        this.work_type = data().deepCopy(fields()[7].schema(), other.work_type);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.residence_type)) {
        this.residence_type = data().deepCopy(fields()[8].schema(), other.residence_type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.avg_glucose_level)) {
        this.avg_glucose_level = data().deepCopy(fields()[9].schema(), other.avg_glucose_level);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.bmi)) {
        this.bmi = data().deepCopy(fields()[10].schema(), other.bmi);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.stroke)) {
        this.stroke = data().deepCopy(fields()[11].schema(), other.stroke);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.smoking_status)) {
        this.smoking_status = data().deepCopy(fields()[12].schema(), other.smoking_status);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.time_stamp)) {
        this.time_stamp = data().deepCopy(fields()[13].schema(), other.time_stamp);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Practice instance
     * @param other The existing instance to copy.
     */
    private Builder(Practice other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pid)) {
        this.pid = data().deepCopy(fields()[1].schema(), other.pid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gender)) {
        this.gender = data().deepCopy(fields()[2].schema(), other.gender);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.age)) {
        this.age = data().deepCopy(fields()[3].schema(), other.age);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.hypertension)) {
        this.hypertension = data().deepCopy(fields()[4].schema(), other.hypertension);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.heart_disease)) {
        this.heart_disease = data().deepCopy(fields()[5].schema(), other.heart_disease);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.ever_married)) {
        this.ever_married = data().deepCopy(fields()[6].schema(), other.ever_married);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.work_type)) {
        this.work_type = data().deepCopy(fields()[7].schema(), other.work_type);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.residence_type)) {
        this.residence_type = data().deepCopy(fields()[8].schema(), other.residence_type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.avg_glucose_level)) {
        this.avg_glucose_level = data().deepCopy(fields()[9].schema(), other.avg_glucose_level);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.bmi)) {
        this.bmi = data().deepCopy(fields()[10].schema(), other.bmi);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.stroke)) {
        this.stroke = data().deepCopy(fields()[11].schema(), other.stroke);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.smoking_status)) {
        this.smoking_status = data().deepCopy(fields()[12].schema(), other.smoking_status);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.time_stamp)) {
        this.time_stamp = data().deepCopy(fields()[13].schema(), other.time_stamp);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.CharSequence getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Practice.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Practice.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'pid' field.
      * @return The value.
      */
    public java.lang.CharSequence getPid() {
      return pid;
    }

    /**
      * Sets the value of the 'pid' field.
      * @param value The value of 'pid'.
      * @return This builder.
      */
    public Practice.Builder setPid(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.pid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'pid' field has been set.
      * @return True if the 'pid' field has been set, false otherwise.
      */
    public boolean hasPid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'pid' field.
      * @return This builder.
      */
    public Practice.Builder clearPid() {
      pid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }

    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public Practice.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.gender = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public Practice.Builder clearGender() {
      gender = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public java.lang.CharSequence getAge() {
      return age;
    }

    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public Practice.Builder setAge(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.age = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public Practice.Builder clearAge() {
      age = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'hypertension' field.
      * @return The value.
      */
    public java.lang.CharSequence getHypertension() {
      return hypertension;
    }

    /**
      * Sets the value of the 'hypertension' field.
      * @param value The value of 'hypertension'.
      * @return This builder.
      */
    public Practice.Builder setHypertension(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.hypertension = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'hypertension' field has been set.
      * @return True if the 'hypertension' field has been set, false otherwise.
      */
    public boolean hasHypertension() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'hypertension' field.
      * @return This builder.
      */
    public Practice.Builder clearHypertension() {
      hypertension = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'heart_disease' field.
      * @return The value.
      */
    public java.lang.CharSequence getHeartDisease() {
      return heart_disease;
    }

    /**
      * Sets the value of the 'heart_disease' field.
      * @param value The value of 'heart_disease'.
      * @return This builder.
      */
    public Practice.Builder setHeartDisease(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.heart_disease = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'heart_disease' field has been set.
      * @return True if the 'heart_disease' field has been set, false otherwise.
      */
    public boolean hasHeartDisease() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'heart_disease' field.
      * @return This builder.
      */
    public Practice.Builder clearHeartDisease() {
      heart_disease = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'ever_married' field.
      * @return The value.
      */
    public java.lang.CharSequence getEverMarried() {
      return ever_married;
    }

    /**
      * Sets the value of the 'ever_married' field.
      * @param value The value of 'ever_married'.
      * @return This builder.
      */
    public Practice.Builder setEverMarried(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.ever_married = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'ever_married' field has been set.
      * @return True if the 'ever_married' field has been set, false otherwise.
      */
    public boolean hasEverMarried() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'ever_married' field.
      * @return This builder.
      */
    public Practice.Builder clearEverMarried() {
      ever_married = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'work_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getWorkType() {
      return work_type;
    }

    /**
      * Sets the value of the 'work_type' field.
      * @param value The value of 'work_type'.
      * @return This builder.
      */
    public Practice.Builder setWorkType(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.work_type = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'work_type' field has been set.
      * @return True if the 'work_type' field has been set, false otherwise.
      */
    public boolean hasWorkType() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'work_type' field.
      * @return This builder.
      */
    public Practice.Builder clearWorkType() {
      work_type = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'residence_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getResidenceType() {
      return residence_type;
    }

    /**
      * Sets the value of the 'residence_type' field.
      * @param value The value of 'residence_type'.
      * @return This builder.
      */
    public Practice.Builder setResidenceType(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.residence_type = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'residence_type' field has been set.
      * @return True if the 'residence_type' field has been set, false otherwise.
      */
    public boolean hasResidenceType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'residence_type' field.
      * @return This builder.
      */
    public Practice.Builder clearResidenceType() {
      residence_type = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'avg_glucose_level' field.
      * @return The value.
      */
    public java.lang.CharSequence getAvgGlucoseLevel() {
      return avg_glucose_level;
    }

    /**
      * Sets the value of the 'avg_glucose_level' field.
      * @param value The value of 'avg_glucose_level'.
      * @return This builder.
      */
    public Practice.Builder setAvgGlucoseLevel(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.avg_glucose_level = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'avg_glucose_level' field has been set.
      * @return True if the 'avg_glucose_level' field has been set, false otherwise.
      */
    public boolean hasAvgGlucoseLevel() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'avg_glucose_level' field.
      * @return This builder.
      */
    public Practice.Builder clearAvgGlucoseLevel() {
      avg_glucose_level = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'bmi' field.
      * @return The value.
      */
    public java.lang.CharSequence getBmi() {
      return bmi;
    }

    /**
      * Sets the value of the 'bmi' field.
      * @param value The value of 'bmi'.
      * @return This builder.
      */
    public Practice.Builder setBmi(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.bmi = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'bmi' field has been set.
      * @return True if the 'bmi' field has been set, false otherwise.
      */
    public boolean hasBmi() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'bmi' field.
      * @return This builder.
      */
    public Practice.Builder clearBmi() {
      bmi = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'stroke' field.
      * @return The value.
      */
    public java.lang.CharSequence getStroke() {
      return stroke;
    }

    /**
      * Sets the value of the 'stroke' field.
      * @param value The value of 'stroke'.
      * @return This builder.
      */
    public Practice.Builder setStroke(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.stroke = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'stroke' field has been set.
      * @return True if the 'stroke' field has been set, false otherwise.
      */
    public boolean hasStroke() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'stroke' field.
      * @return This builder.
      */
    public Practice.Builder clearStroke() {
      stroke = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'smoking_status' field.
      * @return The value.
      */
    public java.lang.CharSequence getSmokingStatus() {
      return smoking_status;
    }

    /**
      * Sets the value of the 'smoking_status' field.
      * @param value The value of 'smoking_status'.
      * @return This builder.
      */
    public Practice.Builder setSmokingStatus(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.smoking_status = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'smoking_status' field has been set.
      * @return True if the 'smoking_status' field has been set, false otherwise.
      */
    public boolean hasSmokingStatus() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'smoking_status' field.
      * @return This builder.
      */
    public Practice.Builder clearSmokingStatus() {
      smoking_status = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_stamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimeStamp() {
      return time_stamp;
    }

    /**
      * Sets the value of the 'time_stamp' field.
      * @param value The value of 'time_stamp'.
      * @return This builder.
      */
    public Practice.Builder setTimeStamp(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.time_stamp = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'time_stamp' field has been set.
      * @return True if the 'time_stamp' field has been set, false otherwise.
      */
    public boolean hasTimeStamp() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'time_stamp' field.
      * @return This builder.
      */
    public Practice.Builder clearTimeStamp() {
      time_stamp = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Practice build() {
      try {
        Practice record = new Practice();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.pid = fieldSetFlags()[1] ? this.pid : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.gender = fieldSetFlags()[2] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.age = fieldSetFlags()[3] ? this.age : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.hypertension = fieldSetFlags()[4] ? this.hypertension : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.heart_disease = fieldSetFlags()[5] ? this.heart_disease : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.ever_married = fieldSetFlags()[6] ? this.ever_married : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.work_type = fieldSetFlags()[7] ? this.work_type : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.residence_type = fieldSetFlags()[8] ? this.residence_type : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.avg_glucose_level = fieldSetFlags()[9] ? this.avg_glucose_level : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.bmi = fieldSetFlags()[10] ? this.bmi : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.stroke = fieldSetFlags()[11] ? this.stroke : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.smoking_status = fieldSetFlags()[12] ? this.smoking_status : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.time_stamp = fieldSetFlags()[13] ? this.time_stamp : (java.lang.CharSequence) defaultValue(fields()[13]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Practice>
    WRITER$ = (org.apache.avro.io.DatumWriter<Practice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Practice>
    READER$ = (org.apache.avro.io.DatumReader<Practice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
